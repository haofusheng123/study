const getHtml = require("getHtml");
const fs = require("fs");
const mime = require("mime");  //设置文件的content-type
const fsPromise = fs.promises;
const path = require("path");

module.exports = async function searchFile(_path,pathname,res) {
    if (!fs.existsSync(_path)) {
        let html = getError(404,"没有找到文件");
        res.end(html);
        return;
    };
    let ext = path.extname(_path);
    if (!ext) {
        let list = await searchDir(_path,pathname);
        let html = fs.readFileSync(path.join("./view/filelist.html"),"utf-8");
        let content=getHtml(list);
        html=html.replace(/\{\{filename\}\}/,content);
        res.end(html);
    }else {
        let data;
        try {
            if (ext===".jpg") setOverTime(res,30);
            data = fs.readFileSync(_path);
        } catch{
            data = JSON.stringify({type:"文件查找失败",code:404});
        }
        res.setHeader("Content-Type",mime[ext.slice(1)]);
        res.end(data);
    }
}

function searchDir (_path,pathname) {
    return fsPromise.readdir(_path,"utf-8").then(list => {
        let fileList = [];
        list.forEach(item => {
            let _type = path.extname(path.join(_path,item))==="" ? "dir" : path.extname(path.join(_path,item));
            let cappath = pathname+"/";
            cappath=cappath.replace(/\/+/,"/");
            fileList.push({name:item,path:"http://10.9.47.242:2000"+(cappath==="/" ? "/" : cappath)+item,type:_type});
        });
        return fileList;
    });
}

function setOverTime (res,num) { //设置图片过期时间，调用缓存减少请求次数
    let date = new Date();
    date.setDate(date.getDate()+num);
    res.setHeader("expires",date);
}

function getError (code,err) {
    let html = fs.readFileSync(path.join("./view/error.html"),"utf-8");
    html = html.replace("{{error}}",err);
    html = html.replace("{{code}}",code);
    return html;
}